1)malloc 动态分配内存函数，返回分配空间的首地址
    例子：
    int * p;
    p = (int *) malloc (sizeof(int));
    注：1.malloc函数返回的是void * 类型（不确定类型的指针），需要类型转换
        2.需要手动指定分配的内存大小（字节数）
        3.malloc分配的连续内存空间，赋值给一个指针变量，这个指针变量可以当成数组来用。

2）指针的类型
    指针也是分类型的，指针的加减不是简单的地址加减，而是加减了指针指向类型的倍数
    注：在链表等数据结构中，不要运用这种方法去找节点，因为，分配的存储空间不一定是连续的。所以，要用while循环的方式移动指针p=p->pNext来实现更为合适。

3)scanf 从标准输入流里读取值到变量的函数，需要先包含头文件stdio
    scanf("%d%d",&a,&b)//从键盘输入中读取两个整数，赋给a b两个变量，两个值用空白字符分隔
    注："%d%d"时用空白字符分隔；"%d,%d"时需要用逗号分隔

4）.h头文件有什么作用
    将函数的声明和定义分开，是模块化编程和代码重用的要求。头文件一般放一些类型定义、函数声明等，函数的具体实现则放在.c文件里。

5)mac默认的编辑器是clang+llvm,但是仍然可以用gcc命令。
    gcc -v //查看版本
    gcc -o aaa aaa.c//编译c程序

6)数据结构定义总结：
    数据域类型定义 
        typedef int ElemType;
    数据元素（节点）定义
        typedef struct NODE {
            ElemType data;
            struct NODE *next;
        } NODE, *PNODE;
    数据机构定义
        typedef struct LinkStack {
            int size;
            PNODE top,bottom;
        } LinkStack,*PLinkStack;
    注意：
        1.一种数据结构的结构体包含了指向这个数据结构的指针、数据元素个数等，它只是指向这个数据机构物理地址的一个壳子而已。真正的数据结构在内存中，一般通过指针建立关系构造。只要知道了一个数据结构的首地址，抓住了这个火车头，所有的操作都可以进行了。
        2.顺序表用“动态分配的一维数组”表示；单链表（可用头指针唯一确定），所以用“结构指针”表示。


7)函数声明
    函数声明的参数只写参数类型即可，写不写形参没有关系。

8）内存四区模型
    栈区（局部变量）
    堆区（malloc free，程序动态分配 手动释放）
    静态区（静态变量 全局变量 常量） 
    代码区（可执行代码）
    注意：栈的生长方向和数组内元素的存放方向相反
         堆的生长方向和数组内元素的存放方向相同

9）函数调用模型

10)数组
    整型数组 字符数组（字符串）
    循环输出 整体输出
    注意：c语言不支持动态数组，且数组元素类型是相同的。（见13）
11) 形参中的&，是引用参数
    是c++写法，c++是c的超集合。这个是引用变量，c语言是没有的，所以c语言要实现就要用指针。
    用c++编译器可以使用，用c编译器会报错的。可以改成.cpp，使用c++编译器。

12）指针移动操作总结：
    1.指针变量：根据类型不同加减，前提必须是连续空间
    2.数组：先去数组值，然后加&
    3.数组名：根据数组名得到首地址，加减数字

13）动态分配的一维数组的实现：（线性表的顺序存储实现）
    1.定义指针变量
    2.malloc分配空间
    3.把指针变量当成数组访问即可

14）一个函数作为另一个函数的形参被调用：
    此时要用到函数指针变量（见test5）

15)数组做函数参数：
    传递的是数组首地址，形参实参共用一块内存。
    不用指定数组大小（见test6）

16)字符数组（字符串）处理函数：string.h
    gets puts strcat strcpy strcmp strlen
